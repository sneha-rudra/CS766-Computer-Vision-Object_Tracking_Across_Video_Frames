function result = computeFlow(img1, img2, win_radius, template_radius, grid_MN)

    img1 = im2double(img1);
    img2 = im2double(img2);
    img2 = padarray(img2,[win_radius win_radius]);
  
    inc = size(img1)./grid_MN;  
  
    %[X,Y] = meshgrid(1:3,10:14)
    
    [X,Y] = meshgrid(1:inc(1,1):size(img1,1), 1:inc(1,2):size(img1,2));
    x = 
    for i = 1:1:size(X,1)
        for j = 1:1:size(Y,1)
            
        end
    end
    %x = zeros(1,size(img1,1)*size(img1,2)/(inc(1,1)*inc(1,2)));
    %y = zeros(1,size(img1,1)*size(img1,2)/(inc(1,1)*inc(1,2)));
    %u = zeros(1,size(img1,1)*size(img1,2)/(inc(1,1)*inc(1,2)));
    %v = zeros(1,size(img1,1)*size(img1,2)/(inc(1,1)*inc(1,2)));
    
    fh1 = figure;
    imshow(img1), hold on
    
    k = 0;
    for i = template_radius+1 : inc(1,2) : size(img1,2)-template_radius-1
       for j = template_radius+1 : inc(1,1) : size(img1,1)-template_radius-1
           k = k+1;
           
%            uncomment to plot bounds of template           
%            plot(i-template_radius,j-template_radius,'r*');
%            plot(i+template_radius,j+template_radius,'g*');

           template = img1(j-template_radius:j+template_radius,i-template_radius :i+template_radius);
           window = img2(j:j+2*win_radius,i:i+2*win_radius);
           
           correlation_output = normxcorr2(template, window);
           
           [~,idx] = max(correlation_output(:));
           [max_y, max_x] = ind2sub(size(correlation_output),idx);

           % (max_x - template_radius -> max in template frame
           % (i + max_x - template_radius) -> max in padded image frame
           % (i + max_x - template_radius) - (win_radius + 1) -> max in original image frame
           % max - i, max - j -> optical flow vectors
           u(k) = (i + max_x - template_radius) - (win_radius + 1) - i;
           v(k) = (j + max_y - template_radius) - (win_radius + 1) - j;
           
           x(k) = i;
           y(k) = j;
       end
    end
    quiver(x,y,u,v,'linewidth', 2);
    annotated_img = saveAnnotatedImg(fh1);
    result = annotated_img;
end

%%
function annotated_img = saveAnnotatedImg(fh)
figure(fh); % Shift the focus back to the figure fh

% The figure needs to be undocked
set(fh, 'WindowStyle', 'normal');

% The following two lines just to make the figure true size to the
% displayed image. The reason will become clear later.
img = getimage(fh);
truesize(fh, [size(img, 1), size(img, 2)]);

% getframe does a screen capture of the figure window, as a result, the
% displayed figure has to be in true size. 
frame = getframe(fh);
frame = getframe(fh);
pause(0.5); 
% Because getframe tries to perform a screen capture. it somehow 
% has some platform depend issues. we should calling
% getframe twice in a row and adding a pause afterwards make getframe work
% as expected. This is just a walkaround. 
annotated_img = frame.cdata;
end

% 
% sz = size(img1);
% 
% xgap = sz(1)/grid_MN(1);
% ygap = sz(2)/grid_MN(2);
% 
% [x,y] = meshgrid(1:xgap:sz(1), 1:ygap:sz(2));
% 
% 
% grdSz = size(x);
% u = zeros(size(x));
% v = zeros(size(x));
% 
% %nnz(u)
% %return;
% 
% for gi = 1:1:grdSz(1)
%     for gj = 1:1:grdSz(2)
%         
%         i = x(gi,gj);
%         j = y(gi,gj);
%         
%         timin = max(1,i-template_radius);
%         timax = min(i+template_radius, sz(1));
%         tjmin = max(1,j-template_radius);
%         tjmax = min(j+template_radius, sz(2));
%         
%         %for ti = timin : 1 : timax
%         %    for tj = tjmin : 1 : tjmax
%         %        
%         %    end
%         %end
% 
%         template = img1(timin:1:timax, tjmin:1:tjmax);
%         %figure(1)
%         %imshow(template)
%                        
%         wimin = max(1,i-win_radius);
%         wimax = min(i+win_radius, size(img2,1));
%         wjmin = max(1,j-win_radius);
%         wjmax = min(j+win_radius, size(img2,2));
%         
%         A = img2(wimin:1:wimax, wjmin:1:wjmax);
%         %figure(2)
%         %imshow(A)
%         %return;
%         c = normxcorr2(template, A);
%         [ypeak, xpeak] = find(c==max(c(:)));
%         %surf(c)
%         %return;
%         %ypeak
%         i2 = wimin + ypeak;  
%         j2 = wjmin + xpeak;
%         
%         
%         u(gi,gj) = i2 - i;
%         v(gi,gj) = j2 - j;
%         
%         
%         
% %         imax2 = i;
% %         jmax2 = j;
% %         corrmax = 0;
% %         
% %         for i1 = -template_radius:1:template_radius
% %             for j1 =-template_radius:1:template_radius
% %                 if i + i1 >= 1 && i+ i1 <= sz(1) && j+ j1 >=1 && j+ j1 <= sz(2)
% %                     
% %                     winUp = max(1, i+i1-win_radius);
% %                     winDown = min(sz(1), i+i1+win_radius);
% %                     winLeft = max(1,j+j1-win_radius);
% %                     winRight = min(sz(2), j+j1+win_radius);
% %                     
% %                     winImg1 = uint8(ones(length(winUp:1:winDown),length(winLeft:1:winRight)));
% %                     winImg2 = uint8(ones(length(winUp:1:winDown),length(winLeft:1:winRight)));
% %                     
% %                     szWin = [length(winUp:1:winDown), length(winLeft:1:winRight)];
% %                     
% %                     for vi = winUp:1:winDown
% %                         for vj = winLeft:1:winRight
% %                             wi = vi - winUp +1;
% %                             wj = vj - winLeft + 1;
% %                             winImg1(wi , wj) = img1(vi, vj);
% %                             winImg2(wi , wj) = img2(vi, vj);
% %                         end
% %                     end
% %                     corr = norm(normxcorr2(winImg1, winImg2));
% %                     
% %                     if corr > corrmax
% %                         imax2 = i + i1;
% %                         jmax2 = j + j1;
% %                         corrmax = corr;
% %                     end
% %                     
% %                 end
% %             end
% %         end
% %         
% %         %corrmax
% %         
% %         u(gi,gj) = imax2 -i;
% %         v(gi,gj) = jmax2 -j;
% %         nnz(u)
%         
%     end
% end
% 
% %u = [0,0,0; 0,0,0; 0,0,0; 0,0,0];
% %v = [1,1,1; 1,1,1; 1,1,1; 1,1,1];
% 
% %u = [1,1,1; 1,1,1; 1,1,1; 1,1,1];
% %v = [0,0,0; 0,0,0; 0,0,0; 0,0,0];
% 
% %u
% %v
% fh2 = figure; imshow(img1);
% %return;
% hold on
% 
% 
% quiver(y,x,v,u, 'linewidth', 3)
% 
% 
% hold off
% annotated_img = saveAnnotatedImg(fh2);
% 
% result = annotated_img;
% %delete(fh2);
% 
% 
% %[X,Y] = meshgrid(1:3,10:14)
% %
% %X =
% %
% %     1     2     3
% %     1     2     3
% %     1     2     3
% %     1     2     3
% %     1     2     3
% 
% 
% function annotated_img = saveAnnotatedImg(fh)
% figure(fh); % Shift the focus back to the figure fh
% 
% % The figure needs to be undocked
% set(fh, 'WindowStyle', 'normal');
% 
% % The following two lines just to make the figure true size to the
% % displayed image. The reason will become clear later.
% img = getimage(fh);
% truesize(fh, [size(img, 1), size(img, 2)]);
% 
% % getframe does a screen capture of the figure window, as a result, the
% % displayed figure has to be in true size. 
% frame = getframe(fh);
% frame = getframe(fh);
% pause(0.5); 
% % Because getframe tries to perform a screen capture. it somehow 
% % has some platform depend issues. we should calling
% % getframe twice in a row and adding a pause afterwards make getframe work
% % as expected. This is just a walkaround. 
% annotated_img = frame.cdata;
